"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTTP API VectorDB
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã ConnectionController –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –≤ main.rs
"""

import requests
import json
import numpy as np
from typing import List, Dict, Optional
import time


class VectorDBClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VectorDB HTTP API"""
    
    def __init__(self, base_url: str = "http://127.0.0.1:8080"):
        self.base_url = base_url
        self.session = requests.Session()
        
    def _make_request(self, endpoint: str, data: dict, method: str = "POST") -> dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ API"""
        url = f"{self.base_url}{endpoint}"
        try:
            if method == "POST":
                response = self.session.post(url, json=data, timeout=10)
            elif method == "GET":
                response = self.session.get(url, timeout=10)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}")
            
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {endpoint}: {e}")
            return {"status": "error", "message": str(e)}
    
    def add_collection(self, name: str, metric: str = "euclidean", dimension: int = 384) -> dict:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é"""
        data = {
            "name": name,
            "metric": metric,
            "dimension": dimension
        }
        return self._make_request("/collection", data)
    
    def delete_collection(self, name: str) -> dict:
        """–£–¥–∞–ª—è–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é"""
        data = {"name": name}
        return self._make_request("/collection/delete", data)
    
    def add_vector(self, collection: str, embedding: List[float], 
                   metadata: Optional[Dict[str, str]] = None) -> dict:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–µ–∫—Ç–æ—Ä –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é"""
        data = {
            "collection": collection,
            "embedding": embedding,
            "metadata": metadata or {}
        }
        return self._make_request("/vector", data)
    
    def update_vector(self, collection: str, vector_id: int,
                     embedding: Optional[List[float]] = None,
                     metadata: Optional[Dict[str, str]] = None) -> dict:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ–∫—Ç–æ—Ä"""
        data = {
            "collection": collection,
            "vector_id": vector_id,
            "embedding": embedding,
            "metadata": metadata
        }
        return self._make_request("/vector/update", data)
    
    def get_vector(self, collection: str, vector_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä –ø–æ ID"""
        data = {
            "collection": collection,
            "vector_id": vector_id
        }
        return self._make_request("/vector/get", data)
    
    def delete_vector(self, collection: str, vector_id: int) -> dict:
        """–£–¥–∞–ª—è–µ—Ç –≤–µ–∫—Ç–æ—Ä"""
        data = {
            "collection": collection,
            "vector_id": vector_id
        }
        return self._make_request("/vector/delete", data)
    
    def filter_by_metadata(self, collection: str, filters: Dict[str, str]) -> dict:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –≤–µ–∫—Ç–æ—Ä—ã –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º"""
        data = {
            "collection": collection,
            "filters": filters
        }
        return self._make_request("/vector/filter", data)
    
    def find_similar(self, collection: str, query: List[float], k: int = 5) -> dict:
        """–ò—â–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –≤–µ–∫—Ç–æ—Ä—ã"""
        data = {
            "collection": collection,
            "query": query,
            "k": k
        }
        return self._make_request("/vector/similar", data)
    
    def stop_server(self) -> dict:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        return self._make_request("/stop", {})


def generate_random_embedding(dimension: int = 384) -> List[float]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –∑–∞–¥–∞–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏"""
    return np.random.randn(dimension).tolist()


def print_response(operation: str, response: dict):
    """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç API"""
    status = response.get("status", "unknown")
    if status == "ok":
        print(f"‚úÖ {operation}: –£—Å–ø–µ—à–Ω–æ")
        if response.get("data"):
            print(f"   –î–∞–Ω–Ω—ã–µ: {json.dumps(response['data'], ensure_ascii=False, indent=2)}")
    else:
        print(f"‚ùå {operation}: –û—à–∏–±–∫–∞")
        if response.get("message"):
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {response['message']}")


def test_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã API"""
    print("=" * 60)
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VectorDB HTTP API")
    print("=" * 60)
    
    client = VectorDBClient()
    
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    print("\n" + "=" * 60)
    print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
    print("=" * 60)
    
    test_collection = "test_collection"
    response = client.add_collection(test_collection, "euclidean", 128)
    print_response("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏", response)
    
    # 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤
    print("\n" + "=" * 60)
    print("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤")
    print("=" * 60)
    
    vector_ids = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ–∫—Ç–æ—Ä–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    test_data = [
        {
            "embedding": generate_random_embedding(128),
            "metadata": {"category": "test", "type": "document", "index": "0"}
        },
        {
            "embedding": generate_random_embedding(128),
            "metadata": {"category": "test", "type": "image", "index": "1"}
        },
        {
            "embedding": generate_random_embedding(128),
            "metadata": {"category": "production", "type": "document", "index": "2"}
        }
    ]
    
    for i, data in enumerate(test_data):
        response = client.add_vector(test_collection, data["embedding"], data["metadata"])
        print_response(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ {i+1}", response)
        if response.get("status") == "ok" and response.get("data"):
            vector_ids.append(response["data"].get("id"))
    
    print(f"\nüìù –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: {len(vector_ids)}")
    print(f"   ID –≤–µ–∫—Ç–æ—Ä–æ–≤: {vector_ids}")
    
    # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ –ø–æ ID
    if vector_ids:
        print("\n" + "=" * 60)
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ –ø–æ ID")
        print("=" * 60)
        
        response = client.get_vector(test_collection, vector_ids[0])
        print_response(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ ID={vector_ids[0]}", response)
    
    # 4. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
    print("\n" + "=" * 60)
    print("üîé –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤ –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º")
    print("=" * 60)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ category=test
    response = client.filter_by_metadata(test_collection, {"category": "test"})
    print_response("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ category=test", response)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ type=document
    response = client.filter_by_metadata(test_collection, {"type": "document"})
    print_response("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ type=document", response)
    
    # 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞
    if vector_ids:
        print("\n" + "=" * 60)
        print("‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞")
        print("=" * 60)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        new_metadata = {"category": "updated", "type": "modified", "timestamp": str(time.time())}
        response = client.update_vector(test_collection, vector_ids[0], metadata=new_metadata)
        print_response(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–∞ ID={vector_ids[0]}", response)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        response = client.get_vector(test_collection, vector_ids[0])
        print_response(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞ ID={vector_ids[0]}", response)
    
    # 6. –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞
    if vector_ids and len(vector_ids) > 1:
        print("\n" + "=" * 60)
        print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞")
        print("=" * 60)
        
        response = client.delete_vector(test_collection, vector_ids[-1])
        print_response(f"–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ ID={vector_ids[-1]}", response)
    
    # 7. –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    print("\n" + "=" * 60)
    print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
    print("=" * 60)
    
    response = client.delete_collection(test_collection)
    print_response("–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏", response)
    
    # 8. –†–∞–±–æ—Ç–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π my_documents (–∏–∑ main.rs)
    print("\n" + "=" * 60)
    print("üìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'my_documents'")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ –Ω–µ–≥–æ
    print("\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é 'my_documents'...")
    
    base_vector = np.random.randn(384)
    added_ids = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä
    response = client.add_vector("my_documents", base_vector.tolist(), 
                                 {"category": "document", "type": "base", "source": "python_test"})
    print_response("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞", response)
    if response.get("status") == "ok":
        added_ids.append(response["data"].get("id"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º 3 –ø–æ—Ö–æ–∂–∏—Ö –≤–µ–∫—Ç–æ—Ä–∞ (–±–∞–∑–æ–≤—ã–π + –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º)
    for i in range(3):
        noise = np.random.randn(384) * 0.4  #  —à—É–º
        similar_vector = base_vector + noise
        
        response = client.add_vector("my_documents", similar_vector.tolist(),
                                     {"category": "document", "type": f"similar_{i+1}", "source": "python_test"})
        print_response(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞ {i+1}", response)
        if response.get("status") == "ok":
            added_ids.append(response["data"].get("id"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º 2 —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ —Ä–∞–∑–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–∞
    for i in range(2):
        different_vector = np.random.randn(384)
        
        response = client.add_vector("my_documents", different_vector.tolist(),
                                     {"category": "other", "type": f"different_{i+1}", "source": "python_test"})
        print_response(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞ {i+1}", response)
        if response.get("status") == "ok":
            added_ids.append(response["data"].get("id"))
    
    print(f"\nüìù –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ my_documents: {len(added_ids)}")
    print(f"   ID –≤–µ–∫—Ç–æ—Ä–æ–≤: {added_ids}")
    
    # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –≤–µ–∫—Ç–æ—Ä—ã –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –±–∞–∑–æ–≤—ã–π
    print("\nüéØ –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ (–¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞)...")
    response = client.find_similar("my_documents", base_vector.tolist(), k=3)
    print_response("–ü–æ–∏—Å–∫ 3 –ø–æ—Ö–æ–∂–∏—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤", response)
    
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("=" * 60)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    print("\nüõë –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
    response = client.stop_server()
    print_response("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", response)
    
    print("\nüí§ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞...")
    time.sleep(2)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        test_api()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()