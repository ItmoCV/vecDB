// src/main.rs
use std::collections::HashMap;
use std::env;
use std::sync::Arc;
use tokio::sync::RwLock;
use crate::core::embeddings::make_embeddings;
use crate::core::vector_db::VectorDB;
use crate::core::lsh::LSHMetric;
use crate::core::controllers::{CollectionController, ConnectionController, StorageController};
use crate::core::config::ConfigLoader;

pub mod core;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
fn create_metadata(category: &str, additional: Option<HashMap<String, String>>) -> HashMap<String, String> {
    let mut meta = HashMap::new();
    meta.insert("category".to_string(), category.to_string());

    if let Some(additional_meta) = additional {
        meta.extend(additional_meta);
    }

    meta
}

#[tokio::main]
async fn main() {
    println!("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å VectorDB ===\n");

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –¥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    let args: Vec<String> = env::args().collect();
    let config_path = if args.len() > 1 {
        args[1].clone()
    } else {
        println!("–ü—É—Ç—å –¥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.");
        println!("–ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞: cargo run -- config.json");
        std::process::exit(1);
    };

    // –°–æ–∑–¥–∞–µ–º VectorDB, –ø–µ—Ä–µ–¥–∞–≤ –ø—É—Ç—å –¥–æ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∞
    let mut db = VectorDB::new(config_path.clone());

    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    println!("üìÇ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏...");
    db.load();

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å –º–µ—Ç—Ä–∏–∫–æ–π Euclidean –∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å—é –≤–µ–∫—Ç–æ—Ä–æ–≤ 384
    let collection_name = "my_documents".to_string();
    let vector_dimension = 384; // –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    
    match db.add_collection(collection_name.clone(), LSHMetric::Euclidean, vector_dimension) {
        Ok(_) => {
            println!("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: {} —Å —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å—é –≤–µ–∫—Ç–æ—Ä–æ–≤: {}", collection_name, vector_dimension);
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–µ–∫—Ç–æ—Ä—ã
            let texts = vec![
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                "–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏"
            ];

            let mut vector_ids = Vec::new();

            // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
            for (i, text) in texts.iter().enumerate() {
                let embedding = make_embeddings(text).expect("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥");
                let metadata = create_metadata("document", None);

                let id = db.add_vector(&collection_name, embedding, metadata).unwrap();
                vector_ids.push(id);
                println!("  ‚ûï –î–æ–±–∞–≤–ª–µ–Ω –≤–µ–∫—Ç–æ—Ä {} —Å ID: {}", i + 1, id);
            }

            println!("üìù –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {} –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é '{}'", vector_ids.len(), collection_name);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            db.dump();
            println!("üíæ –ö–æ–ª–ª–µ–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ –¥–∏—Å–∫!\n");
        }
        Err(_) => {
            println!("‚ÑπÔ∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è '{}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é\n", collection_name);
        }
    }

    // ========== –ó–ê–ü–£–°–ö HTTP –°–ï–†–í–ï–†–ê ==========
    println!("üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É HTTP —Å–µ—Ä–≤–µ—Ä–∞...");
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –¥–ª—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
    let mut config_loader = ConfigLoader::new();
    config_loader.load(config_path);
    
    let storage_controller = Arc::new(
        StorageController::new(config_loader.get("path"))
    );
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º collection_controller –∏–∑ db –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ Arc<RwLock<>>
    let collection_controller = Arc::new(RwLock::new(
        std::mem::replace(
            db.collection_controller_mut(),
            CollectionController::new(Arc::clone(&storage_controller))
        )
    ));
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º connection_controller
    let connection_config = config_loader.get("connection");
    let host = connection_config.get("host")
        .map(|s| s.as_str())
        .unwrap_or("0.0.0.0");
    let port = connection_config.get("port")
        .map(|s| s.as_str())
        .unwrap_or("8080");
    
    // –°–æ–∑–¥–∞–µ–º connection_controller –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
    let mut connection_controller = ConnectionController::new(
        Arc::clone(&storage_controller),
        config_loader
    );
    
    let addr_str = format!("{}:{}", host, port);
    let addr = addr_str.parse().expect("–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞");
    
    println!("\n‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É");
    println!("üåê –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: http://{}", addr);
    println!("üìñ Swagger UI: http://{}/swagger-ui", addr);
    println!("üìÑ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: http://{}/api-docs/openapi.json", addr);
    println!("\nüõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /stop");
    println!("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä (–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)
    match connection_controller
        .connection_handler(collection_controller, addr)
        .await
    {
        Ok(returned_controller) => {
            println!("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞");
            println!("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –Ω–∞ –¥–∏—Å–∫...");
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º dump
            let ctrl = returned_controller.read().await;
            ctrl.dump();
            
            println!("‚úÖ –í—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");
            println!("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
        }
        Err(e) => {
            eprintln!("\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {:?}", e);
            std::process::exit(1);
        }
    }
}