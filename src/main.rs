// src/main.rs
use std::env;
use crate::core::vector_db::VectorDB;
use crate::core::config::ConfigLoader;
use crate::core::controllers::ConnectionController;

pub mod core;


#[tokio::main]
async fn main() {
    println!("=== –ó–∞–ø—É—Å–∫ VectorDB ===\n");

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –¥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    let args: Vec<String> = env::args().collect();
    let config_path = if args.len() > 1 {
        args[1].clone()
    } else {
        println!("–ü—É—Ç—å –¥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.");
        println!("–ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞: cargo run -- config.json");
        std::process::exit(1);
    };

    // –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π ConfigLoader
    let mut config_loader = ConfigLoader::new();
    config_loader.load(config_path.clone());
    
    println!("üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:");
    let role = config_loader.get_role();
    println!("üéØ –†–æ–ª—å: {}", role.to_uppercase());
    
    let is_coordinator = config_loader.is_coordinator();

    if is_coordinator {
        println!("üì° –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä - —É–ø—Ä–∞–≤–ª—è–µ—Ç —à–∞—Ä–¥–∞–º–∏");
        match config_loader.get_shard_configs() {
            Ok(shard_configs) => {
                println!("üìä –ù–∞–π–¥–µ–Ω–æ {} —à–∞—Ä–¥–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", shard_configs.len());
                for (i, config) in shard_configs.iter().enumerate() {
                    println!("  –®–∞—Ä–¥ {}: {}:{}", i + 1, config.host, config.port);
                }
            }
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —à–∞—Ä–¥–æ–≤: {}", e);
            }
        }
    } else {
        println!("üíæ –®–∞—Ä–¥ - —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏");
    }

    // –°–æ–∑–¥–∞–µ–º VectorDB –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let mut db = match VectorDB::new_from_config(config_loader.clone()) {
        Ok(db) => {
            if role == "coordinator" {
                println!("‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä VectorDB");
            } else {
                println!("‚úÖ –°–æ–∑–¥–∞–Ω —à–∞—Ä–¥ VectorDB");
            }
            db
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VectorDB: {}", e);
            println!("üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –æ–±—ã—á–Ω—É—é VectorDB...");
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ConfigLoader –¥–ª—è fallback
            let mut fallback_config = ConfigLoader::new();
            fallback_config.load(config_path.clone());
            VectorDB::new(fallback_config)
        }
    };

    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –¥–∏—Å–∫–∞
    println!("üìÇ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏...");
    match db.load().await {
        Ok(_) => {
            println!("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å –¥–∏—Å–∫–∞");
        }
        Err(e) => {
            println!("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –¥–∏—Å–∫–∞: {}", e);
            println!("üÜï –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø—É—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö");
        }
    }

    // ========== –ó–ê–ü–£–°–ö HTTP –°–ï–†–í–ï–†–ê ==========
    println!("üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É HTTP —Å–µ—Ä–≤–µ—Ä–∞...");
    
    // –°–æ–∑–¥–∞–µ–º ConnectionController –¥–ª—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
    let mut connection_controller = ConnectionController::new(config_loader);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ ConnectionController
    let connection_config = connection_controller.get_connection_config();
    let host = connection_config.get("host")
        .map(|s| s.as_str())
        .unwrap_or("0.0.0.0");
    let port = connection_config.get("port")
        .map(|s| s.as_str())
        .unwrap_or("8080");
    
    let addr_str = format!("{}:{}", host, port);
    let addr = match addr_str.parse::<std::net::SocketAddr>() {
        Ok(addr) => addr,
        Err(e) => {
            eprintln!("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: {}", e);
            std::process::exit(1);
        }
    };
    
    println!("\n‚úÖ VectorDB —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
    println!("üåê –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: http://{}", addr);
    if is_coordinator {
        println!("üìñ Swagger UI: http://{}/swagger-ui", addr);
        println!("üìÑ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: http://{}/api-docs/openapi.json", addr);
    }
    println!("üîç Health check: http://{}/health", addr);
    println!("\nüõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /stop");
    println!("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ ConnectionController (–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)
    match connection_controller.start_server(db, addr).await {
        Ok(returned_db) => {
            println!("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞");
            println!("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –Ω–∞ –¥–∏—Å–∫...");
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º dump —á–µ—Ä–µ–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π VectorDB
            returned_db.dump().await;
            
            println!("‚úÖ –í—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");
            println!("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
        }
        Err(e) => {
            eprintln!("\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {:?}", e);
            std::process::exit(1);
        }
    }
}